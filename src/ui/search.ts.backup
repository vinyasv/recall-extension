/**
 * Memex Search UI Controller - Phase 4 Enhanced
 */

console.log('[Memex] Search UI initialized');

// DOM Elements
const searchInput = document.getElementById('searchInput') as HTMLInputElement;
const clearButton = document.getElementById('clearButton') as HTMLButtonElement;
const resultsContainer = document.getElementById('results') as HTMLElement;
const resultsHeader = document.getElementById('resultsHeader') as HTMLElement;
const resultsCount = document.getElementById('resultsCount') as HTMLElement;
const searchTime = document.getElementById('searchTime') as HTMLElement;
const emptyState = document.getElementById('emptyState') as HTMLElement;
const noDbState = document.getElementById('noDbState') as HTMLElement;
const totalPagesElement = document.getElementById('totalPages') as HTMLElement;
const statusElement = document.getElementById('status') as HTMLElement;

let searchTimeout: number | null = null;
let lastQuery: string = '';

/**
 * Initialize the UI
 */
async function initialize(): Promise<void> {
  console.log('[Memex] Initializing search UI...');

  // Load database stats
  await loadStats();

  // Focus search input
  searchInput.focus();
}

/**
 * Load and display database statistics
 */
async function loadStats(): Promise<void> {
  try {
    const response = await chrome.runtime.sendMessage({ type: 'GET_DB_STATS' });

    if (response.success && response.stats) {
      const totalPages = response.stats.totalPages || 0;
      totalPagesElement.textContent = totalPages.toString();

      // Show "no database" state if no pages indexed
      if (totalPages === 0) {
        emptyState.style.display = 'none';
        noDbState.style.display = 'block';
      }
    }

    // Get queue status
    const queueStatus = await chrome.runtime.sendMessage({ type: 'GET_QUEUE_STATUS' });
    if (queueStatus) {
      if (queueStatus.isProcessing) {
        statusElement.textContent = `Indexing (${queueStatus.queueSize} queued)`;
      } else if (queueStatus.queueSize > 0) {
        statusElement.textContent = `${queueStatus.queueSize} pages queued`;
      } else {
        statusElement.textContent = 'Ready';
      }
    }
  } catch (error) {
    console.error('[Memex] Failed to load stats:', error);
  }
}

/**
 * Handle search input with debouncing
 */
searchInput.addEventListener('input', (e) => {
  const query = (e.target as HTMLInputElement).value.trim();

  // Show/hide clear button
  if (query) {
    clearButton.classList.add('show');
  } else {
    clearButton.classList.remove('show');
  }

  // Clear previous timeout
  if (searchTimeout) {
    clearTimeout(searchTimeout);
  }

  // Show empty state if query is empty
  if (!query) {
    resultsContainer.classList.remove('show');
    resultsHeader.style.display = 'none';

    // Show appropriate empty state
    const totalPages = parseInt(totalPagesElement.textContent || '0', 10);
    if (totalPages === 0) {
      emptyState.style.display = 'none';
      noDbState.style.display = 'block';
    } else {
      emptyState.style.display = 'block';
      noDbState.style.display = 'none';
    }
    return;
  }

  // Hide empty states
  emptyState.style.display = 'none';
  noDbState.style.display = 'none';

  // Debounce search
  searchTimeout = window.setTimeout(() => {
    performSearch(query);
  }, 300);
});

/**
 * Clear button handler
 */
clearButton.addEventListener('click', () => {
  searchInput.value = '';
  clearButton.classList.remove('show');
  resultsContainer.classList.remove('show');
  resultsHeader.style.display = 'none';

  const totalPages = parseInt(totalPagesElement.textContent || '0', 10);
  if (totalPages === 0) {
    emptyState.style.display = 'none';
    noDbState.style.display = 'block';
  } else {
    emptyState.style.display = 'block';
    noDbState.style.display = 'none';
  }

  searchInput.focus();
});

/**
 * Perform semantic search
 */
async function performSearch(query: string): Promise<void> {
  console.log('[Memex] Searching for:', query);
  lastQuery = query;

  emptyState.style.display = 'none';
  noDbState.style.display = 'none';
  resultsHeader.style.display = 'none';
  resultsContainer.innerHTML = renderLoadingSkeleton();
  resultsContainer.classList.add('show');

  const startTime = performance.now();

  try {
    // Perform search via background script
    const response = await chrome.runtime.sendMessage({
      type: 'SEARCH_QUERY',
      query,
      options: {
        k: 20,
        minSimilarity: 0.2,
        boostRecent: true,
        boostFrequent: true,
      },
    });

    const endTime = performance.now();
    const duration = Math.round(endTime - startTime);

    if (!response.success) {
      throw new Error(response.error || 'Search failed');
    }

    const results = response.results;

    // Display results
    if (results.length === 0) {
      renderNoResults();
      return;
    }

    // Render result cards
    renderResults(results, duration);

  } catch (error) {
    console.error('[Memex] Search failed:', error);
    renderError(error as Error);
  }
}

/**
 * Render loading skeleton
 */
function renderLoadingSkeleton(): string {
  return Array(3)
    .fill(0)
    .map(
      () => `
    <div class="loading-skeleton">
      <div class="skeleton-line title"></div>
      <div class="skeleton-line url"></div>
      <div class="skeleton-line summary"></div>
      <div class="skeleton-line summary" style="width: 80%;"></div>
    </div>
  `
    )
    .join('');
}

/**
 * Render no results state
 */
function renderNoResults(): void {
  resultsHeader.style.display = 'none';
  resultsContainer.innerHTML = `
    <div class="result-card">
      <div class="result-header">
        <div class="result-title">No Results Found</div>
      </div>
      <div class="result-summary">
        No matching pages found for "${escapeHtml(lastQuery)}".
        Try different search terms or browse more pages to build your index.
      </div>
    </div>
  `;
}

/**
 * Render error state
 */
function renderError(error: Error): void {
  resultsHeader.style.display = 'none';
  resultsContainer.innerHTML = `
    <div class="error-state">
      <div class="error-icon">‚ö†Ô∏è</div>
      <div class="error-title">Search Error</div>
      <div class="error-message">${escapeHtml(error.message)}</div>
      <button class="retry-button" onclick="window.location.reload()">Retry</button>
    </div>
  `;
}

/**
 * Render search results
 */
function renderResults(results: any[], duration: number): void {
  // Update results header
  resultsHeader.style.display = 'flex';
  resultsCount.textContent = `${results.length} result${results.length !== 1 ? 's' : ''}`;
  searchTime.textContent = `${duration}ms`;

  // Render result cards
  resultsContainer.innerHTML = results
    .map((result: any) => {
      const similarity = Math.round(result.similarity * 100);
      const relevance = Math.round((result.relevanceScore || result.similarity) * 100);

      // Format timestamp
      const timeAgo = formatTimeAgo(result.page.timestamp);

      // Format dwell time
      const dwellMin = Math.floor(result.page.dwellTime / 60);
      const dwellSec = result.page.dwellTime % 60;
      const dwellTimeText = dwellMin > 0
        ? `${dwellMin}m ${dwellSec}s`
        : `${dwellSec}s`;

      return `
        <div class="result-card" data-page-id="${result.page.id}">
          <div class="result-header">
            <div class="result-title">${escapeHtml(result.page.title)}</div>
            <div class="similarity-badge">${relevance}%</div>
          </div>
          <div class="result-url">${escapeHtml(result.page.url)}</div>
          <div class="result-summary">${escapeHtml(result.page.summary)}</div>
          <div class="result-metadata">
            <div class="metadata-item">
              <span>üìÖ</span>
              <span>${timeAgo}</span>
            </div>
            <div class="metadata-item">
              <span>‚è±Ô∏è</span>
              <span>${dwellTimeText} reading time</span>
            </div>
            <div class="metadata-item">
              <span>üéØ</span>
              <span>${similarity}% match</span>
            </div>
          </div>
        </div>
      `;
    })
    .join('');

  // Add click handlers to open pages
  document.querySelectorAll('.result-card').forEach((card) => {
    card.addEventListener('click', async () => {
      const pageId = card.getAttribute('data-page-id');
      const page = results.find((r: any) => r.page.id === pageId)?.page;

      if (page) {
        // Update lastAccessed timestamp
        await chrome.runtime.sendMessage({
          type: 'UPDATE_LAST_ACCESSED',
          pageId,
        });

        // Open the page
        chrome.tabs.create({ url: page.url });
      }
    });
  });
}

/**
 * Format timestamp as relative time
 */
function formatTimeAgo(timestamp: number): string {
  const now = Date.now();
  const diff = now - timestamp;

  const seconds = Math.floor(diff / 1000);
  const minutes = Math.floor(seconds / 60);
  const hours = Math.floor(minutes / 60);
  const days = Math.floor(hours / 24);
  const weeks = Math.floor(days / 7);
  const months = Math.floor(days / 30);
  const years = Math.floor(days / 365);

  if (seconds < 60) return 'Just now';
  if (minutes < 60) return `${minutes}m ago`;
  if (hours < 24) return `${hours}h ago`;
  if (days < 7) return `${days}d ago`;
  if (weeks < 4) return `${weeks}w ago`;
  if (months < 12) return `${months}mo ago`;
  return `${years}y ago`;
}

/**
 * Escape HTML to prevent XSS
 */
function escapeHtml(text: string): string {
  const div = document.createElement('div');
  div.textContent = text;
  return div.innerHTML;
}

/**
 * Handle keyboard shortcuts
 */
document.addEventListener('keydown', (e) => {
  // Clear search on Escape
  if (e.key === 'Escape') {
    searchInput.value = '';
    clearButton.classList.remove('show');
    resultsContainer.classList.remove('show');
    resultsHeader.style.display = 'none';

    const totalPages = parseInt(totalPagesElement.textContent || '0', 10);
    if (totalPages === 0) {
      emptyState.style.display = 'none';
      noDbState.style.display = 'block';
    } else {
      emptyState.style.display = 'block';
      noDbState.style.display = 'none';
    }

    searchInput.focus();
  }

  // Focus search input on Cmd/Ctrl + K
  if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
    e.preventDefault();
    searchInput.focus();
    searchInput.select();
  }
});

// Initialize on load
initialize();

// Refresh stats periodically (every 10 seconds)
setInterval(loadStats, 10000);
